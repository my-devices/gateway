//
// FavIcon.cpp
//
// This file has been generated from FavIcon.cpsp on 2020-08-12 06:42:46.
//


#include "FavIcon.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/HTMLForm.h"


#include "Poco/DateTime.h"
#include "Poco/DateTimeParser.h"
#include "Poco/DateTimeFormatter.h"
#include "Poco/DateTimeFormat.h"
#line 9 "/Users/guenter/ws/git/my-devices/gateway/src/FavIcon.cpsp"


// res/FavIcon.ico
static const unsigned char data[] = {
	0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x68, 0x04, 0x00, 
	0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x96, 0x1F, 0xFF, 0xCB, 0x8F, 
	0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 
	0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 
	0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 
	0x8F, 0x10, 0xFF, 0xCE, 0x96, 0x1F, 0xFF, 0xCA, 0x8D, 0x0C, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 
	0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 
	0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 
	0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xCA, 
	0x8D, 0x0C, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 
	0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 
	0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 
	0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 
	0x8F, 0x10, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 
	0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 
	0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 
	0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xC8, 
	0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC9, 0x88, 0x01, 0xFF, 0xC9, 0x89, 0x01, 0xFF, 0xC9, 0x89, 
	0x01, 0xFF, 0xC9, 0x89, 0x01, 0xFF, 0xC9, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 
	0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 
	0xC8, 0x88, 0x01, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC4, 
	0x85, 0x01, 0xFF, 0xBD, 0x81, 0x02, 0xFF, 0xBD, 0x81, 0x03, 0xFF, 0xC0, 0x83, 0x02, 0xFF, 0xC2, 0x84, 
	0x02, 0xFF, 0xC4, 0x86, 0x02, 0xFF, 0xC7, 0x87, 0x01, 0xFF, 0xC7, 0x88, 0x01, 0xFF, 0xC9, 0x88, 0x01, 
	0xFF, 0xC9, 0x89, 0x01, 0xFF, 0xC9, 0x89, 0x01, 0xFF, 0xC9, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 
	0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8E, 0x0F, 0xFF, 0xC6, 0x83, 0x00, 0xFF, 0xC6, 0x84, 0x00, 0xFF, 0xC1, 
	0x82, 0x00, 0xFF, 0xB6, 0x7C, 0x00, 0xFF, 0xAF, 0x77, 0x02, 0xFF, 0xAE, 0x77, 0x04, 0xFF, 0xAF, 0x78, 
	0x05, 0xFF, 0xB1, 0x79, 0x04, 0xFF, 0xB3, 0x7A, 0x04, 0xFF, 0xB6, 0x7C, 0x04, 0xFF, 0xBA, 0x7F, 0x03, 
	0xFF, 0xC0, 0x83, 0x02, 0xFF, 0xC5, 0x86, 0x01, 0xFF, 0xC7, 0x87, 0x01, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 
	0xD1, 0x9B, 0x2D, 0xFF, 0xDB, 0xB1, 0x58, 0xFF, 0xD3, 0x9F, 0x33, 0xFF, 0xCC, 0x90, 0x12, 0xFF, 0xCA, 
	0x8B, 0x08, 0xFF, 0xC4, 0x85, 0x00, 0xFF, 0xBB, 0x7D, 0x00, 0xFF, 0xB4, 0x76, 0x00, 0xFF, 0xB2, 0x75, 
	0x00, 0xFF, 0xB1, 0x77, 0x00, 0xFF, 0xB1, 0x78, 0x02, 0xFF, 0xB1, 0x79, 0x03, 0xFF, 0xB3, 0x7A, 0x01, 
	0xFF, 0xB9, 0x7D, 0x00, 0xFF, 0xC1, 0x82, 0x00, 0xFF, 0xCA, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x17, 0xFF, 
	0xDC, 0xB4, 0x61, 0xFF, 0xF9, 0xF3, 0xE6, 0xFF, 0xFD, 0xFB, 0xF6, 0xFF, 0xF6, 0xEB, 0xD5, 0xFF, 0xF0, 
	0xDD, 0xB7, 0xFF, 0xEA, 0xD1, 0x9B, 0xFF, 0xE3, 0xC1, 0x7B, 0xFF, 0xDA, 0xB0, 0x57, 0xFF, 0xCF, 0x98, 
	0x25, 0xFF, 0xC7, 0x87, 0x02, 0xFF, 0xC5, 0x84, 0x00, 0xFF, 0xC9, 0x8C, 0x12, 0xFF, 0xCD, 0x92, 0x24, 
	0xFF, 0xD1, 0x99, 0x35, 0xFF, 0xD1, 0x98, 0x2C, 0xFF, 0xCB, 0x8E, 0x0F, 0xFF, 0xC5, 0x82, 0x00, 0xFF, 
	0xD2, 0x9D, 0x32, 0xFF, 0xEF, 0xDB, 0xB4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xF3, 0xEA, 0xFF, 0xED, 0xD6, 
	0xAF, 0xFF, 0xD7, 0xB3, 0x7D, 0xFF, 0xC9, 0x9F, 0x68, 0xFF, 0xC8, 0x9B, 0x5D, 0xFF, 0xCD, 0x97, 0x3C, 
	0xFF, 0xCC, 0x91, 0x18, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC6, 0x84, 0x00, 0xFF, 
	0xC7, 0x85, 0x00, 0xFF, 0xD6, 0xA5, 0x41, 0xFF, 0xE7, 0xC9, 0x8F, 0xFF, 0xEF, 0xDA, 0xB5, 0xFF, 0xF2, 
	0xDE, 0xC0, 0xFF, 0xF2, 0xDC, 0xBF, 0xFF, 0xF0, 0xD7, 0xB6, 0xFF, 0xED, 0xD0, 0xA8, 0xFF, 0xE4, 0xC0, 
	0x84, 0xFF, 0xD5, 0xA4, 0x4C, 0xFF, 0xC7, 0x8C, 0x15, 0xFF, 0xC7, 0x86, 0x00, 0xFF, 0xCB, 0x8E, 0x0F, 
	0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x87, 0x00, 0xFF, 
	0xC6, 0x83, 0x00, 0xFF, 0xC5, 0x82, 0x00, 0xFF, 0xC8, 0x88, 0x02, 0xFF, 0xC9, 0x8A, 0x07, 0xFF, 0xCA, 
	0x8B, 0x09, 0xFF, 0xCA, 0x8B, 0x08, 0xFF, 0xC9, 0x89, 0x04, 0xFF, 0xC7, 0x86, 0x00, 0xFF, 0xC7, 0x85, 
	0x00, 0xFF, 0xC8, 0x87, 0x00, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 
	0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 
	0xC8, 0x88, 0x00, 0xFF, 0xC7, 0x87, 0x00, 0xFF, 0xC7, 0x87, 0x00, 0xFF, 0xC7, 0x87, 0x00, 0xFF, 0xC7, 
	0x87, 0x00, 0xFF, 0xC7, 0x87, 0x00, 0xFF, 0xC8, 0x88, 0x00, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 
	0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xC8, 0x88, 0x01, 
	0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 
	0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 
	0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 
	0x01, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCA, 0x8D, 0x0C, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 
	0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 
	0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 
	0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xC8, 0x88, 0x01, 0xFF, 0xCA, 0x8D, 
	0x0C, 0xFF, 0xCE, 0x96, 0x1F, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 
	0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 
	0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 
	0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCB, 0x8F, 0x10, 0xFF, 0xCE, 0x96, 0x1F, 0xFF, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};


static bool checkModified(Poco::Net::HTTPServerRequest& request)
{
	Poco::DateTime modified(2018, 3, 9, 11, 48, 5);
	request.response().setChunkedTransferEncoding(false);
	request.response().set("Last-Modified", Poco::DateTimeFormatter::format(modified, Poco::DateTimeFormat::HTTP_FORMAT));
	if (request.has("If-Modified-Since"))
	{
		Poco::DateTime modifiedSince;
		int tzd;
		Poco::DateTimeParser::parse(request.get("If-Modified-Since"), modifiedSince, tzd);
		if (modified <= modifiedSince)
		{
			request.response().setContentLength(0);
			request.response().setStatusAndReason(Poco::Net::HTTPResponse::HTTP_NOT_MODIFIED);
			request.response().send();
			return false;
		}
	}
	request.response().setContentLength(static_cast<int>(sizeof(data)));
	return true;
}


namespace MyDevices {
namespace Gateway {


void FavIcon::handleRequest(Poco::Net::HTTPServerRequest& request, Poco::Net::HTTPServerResponse& response)
{
	response.setChunkedTransferEncoding(true);
	response.setContentType("image/x-icon");

	if (!(checkModified(request))) return;

	std::ostream& responseStream = response.send();
#line 105 "/Users/guenter/ws/git/my-devices/gateway/src/FavIcon.cpsp"

	responseStream.write(reinterpret_cast<const char*>(data), sizeof(data));
}


} } // namespace MyDevices::Gateway
